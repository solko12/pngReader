import rsa

keys = {"public": (0, 0), "private": (0, 0)}
(pubkey, privkey) = rsa.newkeys(512)

def libraryEncoding(input,output):
    old_png = open(input, "rb")
    new_png = open(output, 'wb')
    for i in range(8):
        signature = old_png.read(1)
        new_png.write(signature)
    height = 0
    width = 0
    colortype = ""
    chunk_length = old_png.read(4)
    chunk_length2 = int.from_bytes(chunk_length, byteorder='big')
    chunk_type = old_png.read(4)
    chunk_type2 = bytearray.fromhex(chunk_type.hex()).decode()
    chunk_data = old_png.read(chunk_length2)
    crc = old_png.read(4)
    while chunk_data:
        if chunk_type2.upper() == "IHDR":
            width = int(chunk_data.hex()[0:8], 16)
            print("Image Width: ", width)
            height = int(chunk_data.hex()[8:16], 16)
            print("Image Height: ", height)
            variable = int(chunk_data.hex()[18:20], 16)
            print("Color Type: ", variable)
            new_png.write(chunk_length)
            new_png.write(chunk_type)
            new_png.write(chunk_data)
            new_png.write(crc)
        elif chunk_type2.upper() in {"IDAT"}:
            chunkLengthDec = int.from_bytes(chunk_length, byteorder='big')
            realLength = 2 * chunkLengthDec
            #newIdatHexencode('utf8')
            newIdatHex = rsa.encrypt(chunk_data.hex(),pubkey)
            newLength = int(len(newIdatHex) / 2)
            newHexIdatLength = format(newLength, 'x')
            while len(newHexIdatLength) % 8 != 0:
                newHexIdatLength = '0' + newHexIdatLength
            print('orginal length hex')
            print(realLength)
            print("from chunk")
            print(chunk_length2)
            print('encrypted lenght')
            print(newLength)
            print("Równe hex length? Old: " + str(len(chunk_data.hex())) + "||New: " + str(len(newIdatHex)))
            print(len(chunk_data.hex()) == len(newIdatHex))
            bytesData = bytes.fromhex(newIdatHex)
            print("Równe bytes length? Old: " + str(len(chunk_data)) + "||New: " + str(len(bytesData)))
            print(len(chunk_data) == len(bytesData))

            new_png.write(bytes.fromhex(newHexIdatLength))
            new_png.write(chunk_type)
            new_png.write(bytes.fromhex(newIdatHex))
            new_png.write(crc)
        else:
            new_png.write(chunk_length)
            new_png.write(chunk_type)
            new_png.write(chunk_data)
            new_png.write(crc)
        chunk_length = old_png.read(4)
        chunk_length2 = int.from_bytes(chunk_length, byteorder='big')
        chunk_type = old_png.read(4)
        chunk_type2 = bytearray.fromhex(chunk_type.hex()).decode()
        chunk_data = old_png.read(chunk_length2)
        crc = old_png.read(4)
    new_png.write(chunk_length)
    new_png.write(chunk_type)
    new_png.write(crc)
    new_png.close()
    old_png.close()
